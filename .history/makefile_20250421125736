
# Variables
APP_NAME = para-shop
PORT = 3001

# Default target
.PHONY: help
help:
	@echo "Available commands:"
	@echo "  make setup         - Set up the entire application (DB, migrations, seed)"
	@echo "  make start         - Start the application in development mode"
	@echo "  make build         - Build the application for production"
	@echo "  make db-start      - Start the PostgreSQL database via Docker"
	@echo "  make db-stop       - Stop the PostgreSQL database"
	@echo "  make db-migrate    - Run Prisma migrations"
	@echo "  make db-seed       - Seed the database with initial data"
	@echo "  make prisma-studio - Start Prisma Studio to view/edit database"
	@echo "  make extract-code  - Extract code files to text for documentation"
	@echo "  make clean         - Clean build artifacts"

# Set up everything
.PHONY: setup
setup: db-start db-migrate db-seed

# Start the development server
.PHONY: start
start:
	npm run dev

# Build the application
.PHONY: build
build:
	npm run build

# Start the database
.PHONY: db-start
db-start:
	docker-compose up -d postgres

# Stop the database
.PHONY: db-stop
db-stop:
	docker-compose down

# Run migrations
.PHONY: db-migrate
db-migrate:
	npx prisma migrate dev

# Run migrations with a specific name
.PHONY: migrate-name
migrate-name:
	@read -p "Enter migration name: " name; \
	npx prisma migrate dev --name $name

# Seed the database
.PHONY: db-seed
db-seed:
	npx prisma db seed

# Load all fixtures
.PHONY: load-fixtures
load-fixtures:
	node prisma/fixtures/run.js

# Run specific fixture
.PHONY: fixture
fixture:
	@read -p "Enter fixture name (e.g., users, products): " name; \
	node prisma/fixtures/$name.js

# Start Prisma Studio
.PHONY: prisma-studio
prisma-studio:
	npx prisma studio

# Clean build artifacts
.PHONY: clean
clean:
	rm -rf .next
	rm -rf node_modules/.cache

# Extract code to text files
.PHONY: extract-code
extract-code:
	# Remove existing files
	rm -f all_texts.txt file_list.txt

	# Find essential files, excluding build artifacts and unnecessary files
	find . \( \
		-path "*/src/*" -o \
	\) -type f \
	! -path "*/.next/*" \
	! -path "*/.history/*" \
	! -path "*/node_modules/*" \
	! -path "*/public/*" \
	! -path "*/.git/*" \
	! -name "*.ico" \
	! -name "*.json" \
	! -name "*.log" \
	! -name "*.gitkeep" \
	! -name "*.d.ts" \
	! -name "*.node" \
	! -name "*.map" \
	! -name "*.test.*" \
	! -name "*.spec.*" \
	> file_list.txt

	# Create all_texts.txt with file contents
	@bash -c 'while read -r file; do \
		echo "File: $$file" >> all_texts.txt; \
		cat "$$file" >> all_texts.txt; \
		echo "" >> all_texts.txt; \
	done < file_list.txt'

	# Append essential directory structure
	echo "Directory Structure:" >> all_texts.txt
	tree -I '.next|.history|node_modules|dist|coverage|.turbo|.cache|*.ico|*.json|*.log|*.gitkeep|*.d.ts|*.node|*.map|*.test.*|*.spec.*' \
		--dirsfirst -a >> all_texts.txt



# Start both the database and application USED
.PHONY: start-all 
start-all: db-start start

# Reset database (drop everything and recreate)
.PHONY: db-reset
db-reset:
	npx prisma migrate reset --force

# Clear all data without dropping schema
.PHONY: clear-db
clear-db:
	node prisma/fixtures/clear-all.js

# Deploy (for production)
.PHONY: deploy
deploy: build
	npm run start


# Reset database and reload all fixtures USED
.PHONY: reset-and-reload
reset-and-reload:
	@echo "🗑️  Resetting database and reloading fixtures..."
	
	# Reset the database schema (skip the seed)
	npx prisma migrate reset --force --skip-seed
	@echo "✅ Database schema reset"
	
	# Run fixtures runner script to load all fixtures in order
	@echo "📦 Loading all fixtures..."
	node prisma/fixtures/run.js
	
	@echo "✅ All fixtures loaded"