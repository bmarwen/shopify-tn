// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Update Shop model to remove planType and add relation to Subscription
model Shop {
  id                String    @id @default(uuid())
  name              String
  subdomain         String    @unique
  description       String?
  logo              String?
  planType          PlanType  @default(STANDARD) // Keep for quick reference
  active            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  owner             User?     @relation("ShopOwner", fields: [ownerId], references: [id])
  ownerId           String?   @unique   // The owner is a user with SHOP_ADMIN role
  users             User[]    @relation("UserShop") // All users associated with this shop
  products          Product[]
  categories        Category[]
  orders            Order[]
  settings          ShopSettings?
  customFields      CustomField[]
  paymentMethods    PaymentMethod[]
  shippingMethods   ShippingMethod[]
  notifications     Notification[]
  subscription      Subscription?
}

enum PlanType {
  STANDARD
  ADVANCED
  PREMIUM
}

model ShopSettings {
  id                String    @id @default(uuid())
  shopId            String    @unique
  shop              Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  currency          String    @default("USD")
  language          String    @default("en")
  timezone          String    @default("UTC")
  lowStockThreshold Int       @default(5)
  contactEmail      String?
  contactPhone      String?
  address           String?
  socialLinks       Json?     // Store social media links as JSON
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Update User model to add relation to Subscription
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  name              String?
  role              Role      @default(CUSTOMER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  shopId            String?   // Shop they belong to or manage
  shop              Shop?     @relation("UserShop", fields: [shopId], references: [id])
  ownedShop         Shop?     @relation("ShopOwner") // Shop they own (only for SHOP_ADMIN)
  orders            Order[]
  addresses         Address[]
  carts             Cart[]
  reviews           Review[]
  notifications     Notification[]
  resetPasswordToken String?
  createdSubscriptions Subscription[] // Subscriptions created by this user
}

enum Role {
  SUPER_ADMIN      // Platform administrator (manages all shops)
  SHOP_ADMIN       // Shop owner/administrator
  SHOP_STAFF       // Shop employee
  CUSTOMER         // Regular customer
}

model PlanPricing {
  id                String        @id @default(uuid())
  planType          PlanType
  monthlyPrice      Float         // Price per month in Tunisian Dinar
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relationships
  subscriptions     Subscription[]

  @@unique([planType])
}

model Subscription {
  id                String             @id @default(uuid())
  shopId            String             @unique // One active subscription per shop
  shop              Shop               @relation(fields: [shopId], references: [id])
  userId            String             // Who created the subscription
  user              User               @relation(fields: [userId], references: [id])
  planPricingId     String             // Which pricing was used
  planPricing       PlanPricing        @relation(fields: [planPricingId], references: [id])
  startDate         DateTime
  endDate           DateTime
  period            SubscriptionPeriod
  status            SubscriptionStatus @default(ACTIVE)
  totalAmount       Float              // Total amount after discount
  appliedDiscount   Float              // Discount percentage applied
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relationships
  payments          SubscriptionPayment[]
}

// Track payments for subscriptions
model SubscriptionPayment {
  id                String             @id @default(uuid())
  subscriptionId    String
  subscription      Subscription       @relation(fields: [subscriptionId], references: [id])
  amount            Float
  paymentDate       DateTime
  paymentMethod     PaymentMethodType
  status            PaymentStatus      @default(PENDING)
  transactionId     String?            // External transaction reference
  receiptUrl        String?            // URL to receipt/invoice
  notes             String?
  trackingInfo      String?            // For bank transfers, tracking numbers, etc.
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

enum SubscriptionPeriod {
  SIX_MONTHS        // No discount
  ONE_YEAR          // 12% discount
  THREE_YEARS       // 20% discount
}

// Add subscription status
enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELED
  PENDING
  TRIAL
}

enum PaymentMethodType {
  CASH
  BANK_TRANSFER
  REMITLY
  CREDIT_CARD
  PAYPAL
  OTHER
}

// Add payment status
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}


// Product Management
model Category {
  id                String     @id @default(uuid())
  name              String
  slug              String
  description       String?
  image             String?
  shopId            String
  shop              Shop       @relation(fields: [shopId], references: [id])
  parentId          String?
  parent            Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children          Category[] @relation("SubCategories")
  products          Product[]  @relation("ProductCategories")
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@unique([shopId, slug])
}

model Product {
  id                String    @id @default(uuid())
  name              String
  slug              String
  description       String?
  price             Float
  cost              Float?
  tva               Float     @default(19)    
  sku               String?
  barcode           String?
  inventory         Int       @default(0)
  lowStockAlert     Boolean   @default(false)
  weight            Float?
  dimensions        Json?     // {length, width, height}
  images            String[]
  shopId            String
  shop              Shop      @relation(fields: [shopId], references: [id])
  categories        Category[] @relation("ProductCategories")
  variants          ProductVariant[]
  customFields      CustomFieldValue[]
  reviews           Review[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  expiryDate        DateTime?
  
  // Add new relations
  discounts         Discount[]
  discountCodes     DiscountCode[]

  @@unique([shopId, slug])
}

model ProductVariant {
  id                String    @id @default(uuid())
  name              String
  price             Float?
  inventory         Int       @default(0)
  sku               String?
  barcode           String?
  images            String[]
  options           Json      // {color: "Red", size: "XL", etc}
  productId         String
  product           Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems         CartItem[]
  orderItems        OrderItem[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

//This feature is especially useful for shops with specialized 
//products that need additional attributes beyond the basic ones like name, price, and description.
model CustomField { 
  id                String    @id @default(uuid())
  name              String
  type              String    // TEXT, NUMBER, BOOLEAN, DATE, etc.
  required          Boolean   @default(false)
  shopId            String
  shop              Shop      @relation(fields: [shopId], references: [id])
  values            CustomFieldValue[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model CustomFieldValue {
  id                String    @id @default(uuid())
  value             String
  customFieldId     String
  customField       CustomField @relation(fields: [customFieldId], references: [id])
  productId         String
  product           Product   @relation(fields: [productId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([customFieldId, productId])
}

// Product Discount
model Discount {
  id          String    @id @default(uuid())
  percentage  Float     // Discount percentage
  enabled     Boolean   @default(true)
  startDate   DateTime  @default(now())
  endDate     DateTime
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Discount Codes
model DiscountCode {
  id          String    @id @default(uuid())
  code        String    // The discount code (e.g., "SUMMER10")
  percentage  Int       @default(10) // Discount percentage
  startDate   DateTime  @default(now())
  endDate     DateTime
  shopId      String
  shop        Shop      @relation(fields: [shopId], references: [id])
  productId   String?   // Optional: specific product ID (null means all products)
  product     Product?  @relation(fields: [productId], references: [id])
  userId      String?   // Optional: specific user ID (null means all users)
  user        User?     @relation(fields: [userId], references: [id])
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([shopId, code]) // Ensure unique codes per shop
}

// Orders and Checkout
model Order {
  id                String    @id @default(uuid())
  orderNumber       String    @unique
  status            OrderStatus @default(PENDING)
  subtotal          Float
  tax               Float
  shipping          Float
  discount          Float     @default(0)
  total             Float
  paymentStatus     PaymentStatus @default(PENDING)
  shippingStatus    ShippingStatus @default(PENDING)
  notes             String?
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  shopId            String
  shop              Shop      @relation(fields: [shopId], references: [id])
  addressId         String?
  address           Address?  @relation(fields: [addressId], references: [id])
  items             OrderItem[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  invoice           Invoice?
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  RETURNED
}

model OrderItem {
  id                String    @id @default(uuid())
  quantity          Int
  unitPrice         Float
  total             Float
  orderId           String
  order             Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId         String
  product           Product   @relation(fields: [productId], references: [id])
  variantId         String?
  variant           ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Cart {
  id                String    @id @default(uuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  items             CartItem[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model CartItem {
  id                String    @id @default(uuid())
  quantity          Int
  cartId            String
  cart              Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId         String
  product           Product   @relation(fields: [productId], references: [id])
  variantId         String?
  variant           ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Customer Data
model Address {
  id                String    @id @default(uuid())
  name              String?
  line1             String
  line2             String?
  city              String
  state             String
  postalCode        String
  country           String
  phone             String?
  isDefault         Boolean   @default(false)
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  orders            Order[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Review {
  id                String    @id @default(uuid())
  rating            Int
  title             String?
  comment           String?
  approved          Boolean   @default(false)
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  productId         String
  product           Product   @relation(fields: [productId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Advanced & Premium Features
model PaymentMethod {
  id                String    @id @default(uuid())
  name              String
  provider          String
  isActive          Boolean   @default(true)
  config            Json
  shopId            String
  shop              Shop      @relation(fields: [shopId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model ShippingMethod {
  id                String    @id @default(uuid())
  name              String
  description       String?
  price             Float
  estimatedDays     String?
  isActive          Boolean   @default(true)
  shopId            String
  shop              Shop      @relation(fields: [shopId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Invoice {
  id                String    @id @default(uuid())
  invoiceNumber     String    @unique
  orderId           String    @unique
  order             Order     @relation(fields: [orderId], references: [id])
  pdfUrl            String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Notification {
  id                String    @id @default(uuid())
  title             String
  message           String
  type              String
  read              Boolean   @default(false)
  userId            String?
  user              User?     @relation(fields: [userId], references: [id])
  shopId            String?
  shop              Shop?     @relation(fields: [shopId], references: [id])
  createdAt         DateTime  @default(now())
}