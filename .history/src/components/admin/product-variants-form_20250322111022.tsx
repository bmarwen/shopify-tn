// src/components/admin/product-variants-form.tsx
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Trash, Plus, ChevronsUpDown } from "lucide-react";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";

interface Variant {
  id?: string;
  name: string;
  price: number;
  inventory: number;
  sku?: string;
  barcode?: string;
  options: Record<string, string>;
}

interface ProductVariantsFormProps {
  variants: Variant[];
  onChange: (variants: Variant[]) => void;
}

export default function ProductVariantsForm({
  variants = [],
  onChange,
}: ProductVariantsFormProps) {
  const [optionTypes, setOptionTypes] = useState<string[]>(
    // Extract unique option types from existing variants
    Array.from(
      new Set(variants.flatMap((variant) => Object.keys(variant.options || {})))
    ).length > 0
      ? Array.from(
          new Set(
            variants.flatMap((variant) => Object.keys(variant.options || {}))
          )
        )
      : ["Color", "Size"] // Default option types
  );

  const [openVariantIds, setOpenVariantIds] = useState<string[]>([]);

  // Toggle variant collapse state
  const toggleVariant = (variantIndex: number) => {
    const id = `variant-${variantIndex}`;
    if (openVariantIds.includes(id)) {
      setOpenVariantIds(openVariantIds.filter((v) => v !== id));
    } else {
      setOpenVariantIds([...openVariantIds, id]);
    }
  };

  const addVariant = () => {
    const newVariant: Variant = {
      name: "",
      price: 0,
      inventory: 0,
      sku: "",
      options: optionTypes.reduce((acc, type) => {
        acc[type] = "";
        return acc;
      }, {} as Record<string, string>),
    };

    const updatedVariants = [...variants, newVariant];
    onChange(updatedVariants);

    // Open the newly added variant
    setOpenVariantIds([...openVariantIds, `variant-${variants.length}`]);
  };

  const updateVariant = (index: number, field: keyof Variant, value: any) => {
    const updatedVariants = [...variants];

    if (field === "options") {
      updatedVariants[index].options = {
        ...updatedVariants[index].options,
        ...value,
      };

      // Update variant name to reflect options (only if name wasn't manually set)
      const currentName = updatedVariants[index].name;
      const wasAutoGenerated =
        !currentName ||
        currentName ===
          Object.values(updatedVariants[index].options)
            .filter(Boolean)
            .join(" / ");

      if (wasAutoGenerated) {
        updatedVariants[index].name = Object.values(
          updatedVariants[index].options
        )
          .filter(Boolean)
          .join(" / ");
      }
    } else {
      // @ts-ignore - We know this is a valid field
      updatedVariants[index][field] = value;
    }

    onChange(updatedVariants);
  };

  const removeVariant = (index: number) => {
    const updatedVariants = [...variants];
    updatedVariants.splice(index, 1);
    onChange(updatedVariants);

    // Remove from open variants
    setOpenVariantIds(openVariantIds.filter((id) => id !== `variant-${index}`));
  };

  const addOptionType = () => {
    // Create a name for the new option that doesn't already exist
    let newOptionName = "New Option";
    let counter = 1;

    while (optionTypes.includes(newOptionName)) {
      newOptionName = `New Option ${counter}`;
      counter++;
    }

    setOptionTypes([...optionTypes, newOptionName]);

    // Add empty value for new option type to all variants
    const updatedVariants = variants.map((variant) => ({
      ...variant,
      options: {
        ...variant.options,
        [newOptionName]: "",
      },
    }));

    onChange(updatedVariants);
  };

  const updateOptionType = (oldType: string, newType: string) => {
    // Prevent duplicate option types
    if (optionTypes.includes(newType) && oldType !== newType) {
      return;
    }

    setOptionTypes(
      optionTypes.map((type) => (type === oldType ? newType : type))
    );

    // Update option keys in all variants
    const updatedVariants = variants.map((variant) => {
      const updatedOptions = { ...variant.options };
      if (oldType in updatedOptions) {
        updatedOptions[newType] = updatedOptions[oldType];
        delete updatedOptions[oldType];
      }

      return {
        ...variant,
        options: updatedOptions,
      };
    });

    onChange(updatedVariants);
  };

  const removeOptionType = (typeToRemove: string) => {
    setOptionTypes(optionTypes.filter((type) => type !== typeToRemove));

    // Remove this option from all variants
    const updatedVariants = variants.map((variant) => {
      const updatedOptions = { ...variant.options };
      delete updatedOptions[typeToRemove];

      return {
        ...variant,
        options: updatedOptions,
      };
    });

    onChange(updatedVariants);
  };

  const generateVariantCombinations = () => {
    // Check if we have option types and values
    const optionsWithValues = optionTypes
      .map((type) => {
        // Get all unique values for this option type across variants
        const values = [
          ...new Set(
            variants.map((variant) => variant.options[type]).filter(Boolean)
          ),
        ];

        return { type, values };
      })
      .filter((option) => option.values.length > 0);

    if (optionsWithValues.length === 0) {
      return; // No options with values to generate combinations
    }

    // Get cartesian product of all option values
    const cartesian = (sets: string[][]): string[][] => {
      return sets.reduce(
        (acc, set) => {
          return acc.flatMap((combo) => set.map((item) => [...combo, item]));
        },
        [[] as string[]]
      );
    };

    const optionSets = optionsWithValues.map((option) => option.values);
    const combinations = cartesian(optionSets);

    // Create variants from combinations
    const existingVariants = [...variants];
    const basePrice =
      existingVariants.length > 0 ? existingVariants[0].price : 0;
    const baseInventory =
      existingVariants.length > 0 ? existingVariants[0].inventory : 0;

    // For each combination, check if it already exists
    combinations.forEach((combo) => {
      const optionObj: Record<string, string> = {};

      // Create options object for this combination
      optionsWithValues.forEach((option, index) => {
        optionObj[option.type] = combo[index];
      });

      // Check if this combination already exists
      const exists = existingVariants.some((variant) => {
        return optionsWithValues.every(
          (option) => variant.options[option.type] === optionObj[option.type]
        );
      });

      if (!exists) {
        // Create new variant with this combination
        const variantName = Object.values(optionObj).join(" / ");

        existingVariants.push({
          name: variantName,
          price: basePrice,
          inventory: baseInventory,
          options: optionObj,
          sku: "",
        });
      }
    });

    onChange(existingVariants);
  };

  return (
    <div className="space-y-6">
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-medium text-gray-800">Option Types</h3>
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={addOptionType}
            className="border-gray-300 text-gray-700"
          >
            <Plus className="h-4 w-4 mr-2" />
            Add Option Type
          </Button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {optionTypes.map((type, index) => (
            <div key={index} className="flex items-center space-x-2">
              <Input
                value={type}
                onChange={(e) => updateOptionType(type, e.target.value)}
                placeholder="e.g., Color, Size, Material"
                className="border-gray-300 text-gray-200 placeholder:text-gray-400"
              />
              <Button
                type="button"
                variant="ghost"
                size="icon"
                onClick={() => removeOptionType(type)}
                disabled={optionTypes.length <= 1}
                className="text-gray-500 hover:text-red-500"
              >
                <Trash className="h-4 w-4" />
              </Button>
            </div>
          ))}
        </div>

        {variants.length > 0 && (
          <div className="pt-2">
            <Button
              type="button"
              variant="secondary"
              size="sm"
              onClick={generateVariantCombinations}
              className="text-gray-800"
            >
              Generate All Combinations
            </Button>
            <p className="text-xs text-gray-500 mt-1">
              Generate variants for all possible combinations of option values
              currently in use.
            </p>
          </div>
        )}
      </div>

      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-medium text-gray-800">Variants</h3>
          <Button
            type="button"
            onClick={addVariant}
            className="bg-indigo-600 hover:bg-indigo-700 text-white"
          >
            <Plus className="h-4 w-4 mr-2" />
            Add Variant
          </Button>
        </div>

        {variants.length === 0 && (
          <div className="bg-gray-50 border border-gray-200 rounded-lg p-6 text-center">
            <p className="text-gray-600">
              No variants yet. Add variants to create different versions of your
              product.
            </p>
            <Button
              type="button"
              onClick={addVariant}
              className="mt-4 bg-indigo-600 hover:bg-indigo-700 text-white"
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Your First Variant
            </Button>
          </div>
        )}

        {variants.map((variant, variantIndex) => (
          <Collapsible
            key={variantIndex}
            open={openVariantIds.includes(`variant-${variantIndex}`)}
            className="border border-gray-200 rounded-lg overflow-hidden"
          >
            <CollapsibleTrigger
              asChild
              onClick={() => toggleVariant(variantIndex)}
            >
              <div className="flex items-center justify-between bg-gray-50 px-4 py-3 cursor-pointer hover:bg-gray-100">
                <div className="flex items-center">
                  <h4 className="font-medium text-gray-800">
                    {variant.name || `Variant ${variantIndex + 1}`}
                  </h4>
                  {variant.inventory <= 0 && (
                    <span className="ml-2 px-2 py-0.5 text-xs bg-red-100 text-red-800 rounded">
                      Out of stock
                    </span>
                  )}
                </div>
                <div className="flex items-center gap-3">
                  <span className="text-sm font-medium text-gray-700">
                    ${variant.price.toFixed(2)}
                  </span>
                  <ChevronsUpDown className="h-4 w-4 text-gray-500" />
                </div>
              </div>
            </CollapsibleTrigger>
            <CollapsibleContent>
              <div className="p-4 border-t border-gray-200 space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {/* Option values */}
                  {optionTypes.map((optionType) => (
                    <div key={optionType} className="space-y-2">
                      <Label className="text-gray-700">{optionType}</Label>
                      <Input
                        value={variant.options[optionType] || ""}
                        onChange={(e) =>
                          updateVariant(variantIndex, "options", {
                            [optionType]: e.target.value,
                          })
                        }
                        placeholder={`Enter ${optionType.toLowerCase()}`}
                        className="border-gray-300 text-gray-800 placeholder:text-gray-400"
                      />
                    </div>
                  ))}
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label className="text-gray-700">Price</Label>
                    <Input
                      type="number"
                      step="0.01"
                      value={variant.price}
                      onChange={(e) =>
                        updateVariant(
                          variantIndex,
                          "price",
                          parseFloat(e.target.value) || 0
                        )
                      }
                      className="border-gray-300 text-gray-800"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label className="text-gray-700">Inventory</Label>
                    <Input
                      type="number"
                      value={variant.inventory}
                      onChange={(e) =>
                        updateVariant(
                          variantIndex,
                          "inventory",
                          parseInt(e.target.value) || 0
                        )
                      }
                      className="border-gray-300 text-gray-800"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label className="text-gray-700">SKU</Label>
                    <Input
                      value={variant.sku || ""}
                      onChange={(e) =>
                        updateVariant(variantIndex, "sku", e.target.value)
                      }
                      placeholder="Optional"
                      className="border-gray-300 text-gray-800 placeholder:text-gray-400"
                    />
                  </div>
                </div>

                <div className="pt-2 flex justify-end">
                  <Button
                    type="button"
                    variant="destructive"
                    size="sm"
                    onClick={() => removeVariant(variantIndex)}
                    className="bg-red-600 hover:bg-red-700 text-white"
                  >
                    <Trash className="h-4 w-4 mr-2" />
                    Remove Variant
                  </Button>
                </div>
              </div>
            </CollapsibleContent>
          </Collapsible>
        ))}
      </div>
    </div>
  );
}
