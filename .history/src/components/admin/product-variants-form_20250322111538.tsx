// src/components/admin/product-variants-form.tsx
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Trash, Plus, ChevronsUpDown } from "lucide-react";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

interface Variant {
  id?: string;
  name: string;
  price: number;
  inventory: number;
  sku?: string;
  barcode?: string;
  options: Record<string, string>;
}

interface ProductVariantsFormProps {
  variants: Variant[];
  onChange: (variants: Variant[]) => void;
}

export default function ProductVariantsForm({
  variants = [],
  onChange,
}: ProductVariantsFormProps) {
  const [optionTypes, setOptionTypes] = useState<string[]>(
    // Extract unique option types from existing variants
    Array.from(
      new Set(variants.flatMap((variant) => Object.keys(variant.options || {})))
    ).length > 0
      ? Array.from(
          new Set(
            variants.flatMap((variant) => Object.keys(variant.options || {}))
          )
        )
      : ["Color", "Size"] // Default option types
  );

  const [openVariantId, setOpenVariantId] = useState<number | null>(null);

  // Toggle variant open/close
  const toggleVariant = (index: number) => {
    setOpenVariantId(openVariantId === index ? null : index);
  };

  const addVariant = () => {
    const newVariant: Variant = {
      name: "",
      price: 0,
      inventory: 0,
      sku: "",
      options: optionTypes.reduce((acc, type) => {
        acc[type] = "";
        return acc;
      }, {} as Record<string, string>),
    };

    // Create a new array with the new variant
    const updatedVariants = [...variants, newVariant];
    onChange(updatedVariants);

    // Open the newly added variant
    setOpenVariantId(updatedVariants.length - 1);
  };

  const updateVariant = (index: number, field: keyof Variant, value: any) => {
    const updatedVariants = [...variants];

    if (field === "options") {
      updatedVariants[index].options = {
        ...updatedVariants[index].options,
        ...value,
      };

      // Update variant name to reflect options
      const currentName = updatedVariants[index].name;
      const wasAutoGenerated =
        !currentName ||
        currentName ===
          Object.values(updatedVariants[index].options)
            .filter(Boolean)
            .join(" / ");

      if (wasAutoGenerated) {
        updatedVariants[index].name = Object.values(
          updatedVariants[index].options
        )
          .filter(Boolean)
          .join(" / ");
      }
    } else {
      // @ts-ignore - We know this is a valid field
      updatedVariants[index][field] = value;
    }

    onChange(updatedVariants);
  };

  const removeVariant = (index: number) => {
    const updatedVariants = [...variants];
    updatedVariants.splice(index, 1);
    onChange(updatedVariants);

    // Reset open variant if the removed one was open
    if (openVariantId === index) {
      setOpenVariantId(null);
    } else if (openVariantId !== null && openVariantId > index) {
      // Adjust open variant index if a variant before it was removed
      setOpenVariantId(openVariantId - 1);
    }
  };

  const addOptionType = () => {
    // Create a name for the new option that doesn't already exist
    let newOptionName = "New Option";
    let counter = 1;

    while (optionTypes.includes(newOptionName)) {
      newOptionName = `New Option ${counter}`;
      counter++;
    }

    setOptionTypes([...optionTypes, newOptionName]);

    // Add empty value for new option type to all variants
    const updatedVariants = variants.map((variant) => ({
      ...variant,
      options: {
        ...variant.options,
        [newOptionName]: "",
      },
    }));

    onChange(updatedVariants);
  };

  const updateOptionType = (oldType: string, newType: string) => {
    // Prevent duplicate option types
    if (optionTypes.includes(newType) && oldType !== newType) {
      return;
    }

    setOptionTypes(
      optionTypes.map((type) => (type === oldType ? newType : type))
    );

    // Update option keys in all variants
    const updatedVariants = variants.map((variant) => {
      const updatedOptions = { ...variant.options };
      if (oldType in updatedOptions) {
        updatedOptions[newType] = updatedOptions[oldType];
        delete updatedOptions[oldType];
      }

      return {
        ...variant,
        options: updatedOptions,
      };
    });

    onChange(updatedVariants);
  };

  const removeOptionType = (typeToRemove: string) => {
    setOptionTypes(optionTypes.filter((type) => type !== typeToRemove));

    // Remove this option from all variants
    const updatedVariants = variants.map((variant) => {
      const updatedOptions = { ...variant.options };
      delete updatedOptions[typeToRemove];

      return {
        ...variant,
        options: updatedOptions,
      };
    });

    onChange(updatedVariants);
  };

  return (
    <div className="space-y-6">
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-medium" style={{ color: "#2c3e50" }}>
            Option Types
          </h3>
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={addOptionType}
            style={{
              borderColor: "#bdc3c7",
              color: "#2c3e50",
            }}
          >
            <Plus className="h-4 w-4 mr-2" />
            Add Option Type
          </Button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {optionTypes.map((type, index) => (
            <div key={index} className="flex items-center space-x-2">
              <Input
                value={type}
                onChange={(e) => updateOptionType(type, e.target.value)}
                placeholder="e.g., Color, Size, Material"
                style={{
                  borderColor: "#bdc3c7",
                  color: "#2c3e50",
                  backgroundColor: "white",
                }}
                className="text-gray-200 placeholder-gray-400 border-2"
              />
              <Button
                type="button"
                variant="ghost"
                size="icon"
                onClick={() => removeOptionType(type)}
                disabled={optionTypes.length <= 1}
                style={{
                  color: optionTypes.length <= 1 ? "#bdc3c7" : "#2c3e50",
                }}
              >
                <Trash className="h-4 w-4" />
              </Button>
            </div>
          ))}
        </div>
      </div>

      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-medium" style={{ color: "#2c3e50" }}>
            Variants
          </h3>
          <Button
            type="button"
            onClick={addVariant}
            style={{
              backgroundColor: "#16a085",
              color: "white",
            }}
          >
            <Plus className="h-4 w-4 mr-2" />
            Add Variant
          </Button>
        </div>

        {variants.length === 0 && (
          <div className="bg-gray-50 border border-gray-200 rounded-lg p-6 text-center">
            <p style={{ color: "#2c3e50" }}>
              No variants yet. Add variants to create different versions of your
              product.
            </p>
            <Button
              type="button"
              onClick={addVariant}
              style={{
                backgroundColor: "#16a085",
                color: "white",
                marginTop: "1rem",
              }}
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Your First Variant
            </Button>
          </div>
        )}

        {variants.map((variant, variantIndex) => (
          <Card
            key={variantIndex}
            className="border-gray-200"
            style={{ borderColor: "#bdc3c7" }}
          >
            <CardHeader
              className="bg-gray-50 cursor-pointer flex flex-row items-center justify-between"
              style={{ backgroundColor: "#f5f7fa" }}
              onClick={() => toggleVariant(variantIndex)}
            >
              <CardTitle className="text-md" style={{ color: "#2c3e50" }}>
                {variant.name || `Variant ${variantIndex + 1}`}
              </CardTitle>
              <div className="flex items-center gap-3">
                <span
                  className="text-sm font-medium"
                  style={{ color: "#2c3e50" }}
                >
                  ${variant.price?.toFixed(2) || "0.00"}
                </span>
                <ChevronsUpDown
                  style={{ color: "#bdc3c7" }}
                  className="h-4 w-4"
                />
              </div>
            </CardHeader>

            {openVariantId === variantIndex && (
              <CardContent
                className="p-4 border-t border-gray-200 space-y-4"
                style={{ borderColor: "#bdc3c7" }}
              >
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {/* Option values */}
                  {optionTypes.map((optionType) => (
                    <div key={optionType} className="space-y-2">
                      <Label style={{ color: "#2c3e50" }}>{optionType}</Label>
                      <Input
                        value={variant.options[optionType] || ""}
                        onChange={(e) =>
                          updateVariant(variantIndex, "options", {
                            [optionType]: e.target.value,
                          })
                        }
                        placeholder={`Enter ${optionType.toLowerCase()}`}
                        className="text-gray-200 placeholder-gray-400 border-2"
                        style={{
                          borderColor: "#bdc3c7",
                          color: "#2c3e50",
                          backgroundColor: "white",
                        }}
                      />
                    </div>
                  ))}
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label style={{ color: "#2c3e50" }}>Price</Label>
                    <Input
                      type="number"
                      step="0.01"
                      value={variant.price}
                      onChange={(e) =>
                        updateVariant(
                          variantIndex,
                          "price",
                          parseFloat(e.target.value) || 0
                        )
                      }
                      className="text-gray-200 border-2"
                      style={{
                        borderColor: "#bdc3c7",
                        color: "#2c3e50",
                        backgroundColor: "white",
                      }}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label style={{ color: "#2c3e50" }}>Inventory</Label>
                    <Input
                      type="number"
                      value={variant.inventory}
                      onChange={(e) =>
                        updateVariant(
                          variantIndex,
                          "inventory",
                          parseInt(e.target.value) || 0
                        )
                      }
                      className="text-gray-200 border-2"
                      style={{
                        borderColor: "#bdc3c7",
                        color: "#2c3e50",
                        backgroundColor: "white",
                      }}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label style={{ color: "#2c3e50" }}>SKU</Label>
                    <Input
                      value={variant.sku || ""}
                      onChange={(e) =>
                        updateVariant(variantIndex, "sku", e.target.value)
                      }
                      placeholder="Optional"
                      className="text-gray-200 placeholder-gray-400 border-2"
                      style={{
                        borderColor: "#bdc3c7",
                        color: "#2c3e50",
                        backgroundColor: "white",
                      }}
                    />
                  </div>
                </div>

                <div className="pt-2 flex justify-end">
                  <Button
                    type="button"
                    variant="destructive"
                    size="sm"
                    onClick={() => removeVariant(variantIndex)}
                    style={{
                      backgroundColor: "#e74c3c",
                      color: "white",
                    }}
                  >
                    <Trash className="h-4 w-4 mr-2" />
                    Remove Variant
                  </Button>
                </div>
              </CardContent>
            )}
          </Card>
        ))}
      </div>
    </div>
  );
}
