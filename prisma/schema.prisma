// prisma/schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Update Shop model to remove planType and add relation to Subscription
model Shop {
  id          String   @id @default(uuid())
  name        String
  subdomain   String   @unique
  description String?
  logo        String?
  planType    PlanType @default(STANDARD) // Keep for quick reference
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner           User?            @relation("ShopOwner", fields: [ownerId], references: [id])
  ownerId         String?          @unique // The owner is a user with SHOP_ADMIN role
  users           User[]           @relation("UserShop") // All users associated with this shop
  products        Product[]
  categories      Category[]
  orders          Order[]
  settings        ShopSettings?
  customFields    CustomField[]
  paymentMethods  PaymentMethod[]
  shippingMethods ShippingMethod[]
  notifications   Notification[]
  subscription    Subscription?
  discountCodes   DiscountCode[]
  checkPayments   CheckPayment[] // Track check payments
}

enum PlanType {
  STANDARD
  ADVANCED
  PREMIUM
}

model ShopSettings {
  id                String   @id @default(uuid())
  shopId            String   @unique
  shop              Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  currency          String   @default("DT")
  language          String   @default("en")
  timezone          String   @default("UTC")
  lowStockThreshold Int      @default(5)
  contactEmail      String?
  contactPhone      String?
  address           String?
  socialLinks       Json? // Store social media links as JSON
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Update User model to add relation to Subscription
model User {
  id                   String         @id @default(uuid())
  email                String         @unique
  password             String
  name                 String?
  role                 Role           @default(CUSTOMER)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  shopId               String? // Shop they belong to or manage
  shop                 Shop?          @relation("UserShop", fields: [shopId], references: [id])
  ownedShop            Shop?          @relation("ShopOwner") // Shop they own (only for SHOP_ADMIN)
  orders               Order[]
  addresses            Address[]
  carts                Cart[]
  reviews              Review[]
  notifications        Notification[]
  resetPasswordToken   String?
  createdSubscriptions Subscription[] // Subscriptions created by this user
  discountCodes        DiscountCode[] @relation("DiscountCodeUsers") // Discount codes this user can use
  processedOrders      Order[]        @relation("ProcessedOrders") // Orders processed by this staff member IN_STORE
}

enum Role {
  SUPER_ADMIN // Platform administrator (manages all shops)
  SHOP_ADMIN // Shop owner/administrator
  SHOP_STAFF // Shop employee
  CUSTOMER // Regular customer
}

model PlanPricing {
  id           String   @id @default(uuid())
  planType     PlanType
  monthlyPrice Float // Price per month in Tunisian Dinar
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  subscriptions Subscription[]

  @@unique([planType])
}

model Subscription {
  id              String             @id @default(uuid())
  shopId          String             @unique // One active subscription per shop
  shop            Shop               @relation(fields: [shopId], references: [id])
  userId          String // Who created the subscription
  user            User               @relation(fields: [userId], references: [id])
  planPricingId   String // Which pricing was used
  planPricing     PlanPricing        @relation(fields: [planPricingId], references: [id])
  startDate       DateTime
  endDate         DateTime
  period          SubscriptionPeriod
  status          SubscriptionStatus @default(ACTIVE)
  totalAmount     Float // Total amount after discount
  appliedDiscount Float // Discount percentage applied
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relationships
  payments SubscriptionPayment[]
}

// Track payments for subscriptions
model SubscriptionPayment {
  id             String            @id @default(uuid())
  subscriptionId String
  subscription   Subscription      @relation(fields: [subscriptionId], references: [id])
  amount         Float
  paymentDate    DateTime
  paymentMethod  PaymentMethodType @default(CASH)
  status         PaymentStatus     @default(PENDING)
  transactionId  String? // External transaction reference
  receiptUrl     String? // URL to receipt/invoice
  notes          String?
  trackingInfo   String? // For bank transfers, tracking numbers, etc.
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

enum SubscriptionPeriod {
  SIX_MONTHS // No discount
  ONE_YEAR // 12% discount
  THREE_YEARS // 20% discount
}

// Add subscription status
enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELED
  PENDING
  TRIAL
}

enum PaymentMethodType {
  CASH
  BANK_TRANSFER
  REMITLY
  CREDIT_CARD
  PAYPAL
  CHECK
  OTHER
}

// Add payment status
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Product Management
model Category {
  id          String     @id @default(uuid())
  name        String
  slug        String
  description String?
  image       String?
  shopId      String
  shop        Shop       @relation(fields: [shopId], references: [id])
  parentId    String?
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  products    Product[]  @relation("ProductCategories")
  discounts   Discount[] // Categories can be targeted by discounts
  discountCodes DiscountCode[] // Categories can be targeted by discount codes
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([shopId, slug])
}

model Product {
  id          String           @id @default(uuid())
  name        String
  slug        String
  description String?
  sku         String? // Optional base SKU
  barcode     String? // Optional base barcode  
  weight      Float?
  dimensions  Json? // {length, width, height}
  images      String[] // Common product images
  shopId      String
  shop        Shop             @relation(fields: [shopId], references: [id])
  categories  Category[]       @relation("ProductCategories")
  variants    ProductVariant[] // All pricing/inventory is in variants
  reviews     Review[]
  cartItems   CartItem[] // Will reference variants
  orderItems  OrderItem[] // Will reference variants
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  expiryDate  DateTime?

  // Relations
  discounts     Discount[] // Legacy single discount relation
  multiDiscounts Discount[] @relation("DiscountProducts") // New multi-targeting relation
  discountCodes DiscountCode[] @relation("DiscountCodeProducts")

  @@unique([shopId, slug])
}

model ProductVariant {
  id           String                    @id @default(uuid())
  name         String // Required variant name (e.g., "Red - Large")
  price        Float // Required - each variant must have a price
  cost         Float? // Optional cost for this variant
  tva          Float                     @default(19) // TVA for this variant, default 19%
  inventory    Int                       @default(0) // Stock for this specific variant
  sku          String? // Optional SKU for this variant
  barcode      String? // Optional barcode for this variant
  images       String[] // Variant-specific images
  options      Json // Required variant options {color: "Red", size: "XL", etc}
  productId    String
  product      Product                   @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems    CartItem[]
  orderItems   OrderItem[]
  customFields VariantCustomFieldValue[] // Move custom fields to variants
  discounts    Discount[]                // Legacy single discount relation
  multiDiscounts Discount[]             @relation("DiscountVariants") // New multi-targeting relation
  discountCodes DiscountCode[]          @relation("DiscountCodeVariants") // Variants can be targeted by discount codes
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
}

model CustomField {
  id        String                    @id @default(uuid())
  name      String
  type      String // TEXT, NUMBER, BOOLEAN, DATE, etc.
  required  Boolean                   @default(false)
  shopId    String
  shop      Shop                      @relation(fields: [shopId], references: [id])
  values    VariantCustomFieldValue[] // Update relation to variants
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
}

model VariantCustomFieldValue {
  id            String         @id @default(uuid())
  value         String
  customFieldId String
  customField   CustomField    @relation(fields: [customFieldId], references: [id])
  variantId     String
  variant       ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([customFieldId, variantId])
}

// Product Discount
model Discount {
  id         String   @id @default(uuid())
  title      String?  // Title for the discount offer
  description String? // Description of the discount
  image      String?  // Image URL for the discount (S3/AWS)
  percentage Float    // Discount percentage
  enabled    Boolean  @default(true)
  startDate  DateTime @default(now())
  endDate    DateTime
  // Multi-targeting support (similar to DiscountCode)
  products   Product[] @relation("DiscountProducts") // Target multiple products
  variants   ProductVariant[] @relation("DiscountVariants") // Target specific variants
  categoryId String?  // Optional: target specific category
  category   Category? @relation(fields: [categoryId], references: [id])
  // Legacy single product support (for backward compatibility)
  productId  String?
  product    Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId  String?  // Optional: target specific variant (legacy)
  variant    ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  // New fields for targeting
  availableOnline   Boolean @default(true)  // Available for online orders
  availableInStore  Boolean @default(true)  // Available for in-store/POS orders
  isDeleted    Boolean @default(false) // Soft delete flag
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Discount Codes
model DiscountCode {
  id         String   @id @default(uuid())
  code       String   // The discount code (e.g., "SUMMER10")
  title      String?  // Title for the discount code offer
  description String? // Description of the discount code
  image      String?  // Image URL for the discount code (S3/AWS)
  percentage Int      @default(10) // Discount percentage
  usageLimit Int?     // Maximum number of times this code can be used (null = unlimited)
  usedCount  Int      @default(0) // Number of times this code has been used
  startDate  DateTime @default(now())
  endDate    DateTime
  shopId     String
  shop       Shop     @relation(fields: [shopId], references: [id])
  // Multi-user support
  users      User[]   @relation("DiscountCodeUsers") // Multiple users can use this code
  isActive   Boolean  @default(true)
  // New fields for enhanced targeting
  availableOnline   Boolean @default(true)  // Available for online orders
  availableInStore  Boolean @default(true)  // Available for in-store/POS orders
  isDeleted    Boolean @default(false) // Soft delete flag
  // Multi-targeting support
  products   Product[] @relation("DiscountCodeProducts")
  variants   ProductVariant[] @relation("DiscountCodeVariants") // Target specific variants
  // Category targeting
  categoryId String? // Optional: target specific category
  category   Category? @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([shopId, code]) // Ensure unique codes per shop
}

// Orders and Checkout
model Order {
  id                String            @id @default(uuid())
  orderNumber       String            @unique
  status            OrderStatus       @default(PENDING)
  subtotal          Float
  tax               Float
  shipping          Float
  discount          Float             @default(0)
  total             Float
  discountCodeId    String? // Track which discount code was used
  discountCodeValue String? // Store the actual code used
  paymentStatus     PaymentStatus     @default(PENDING)
  orderSource       OrderSource       @default(ONLINE) // NEW FIELD
  notes             String?
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  shopId            String
  shop              Shop              @relation(fields: [shopId], references: [id])
  addressId         String?
  address           Address?          @relation(fields: [addressId], references: [id])
  items             OrderItem[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  invoice           Invoice?
  processedByUserId String? // Staff member who processed the order (for IN_STORE orders)
  processedBy       User?             @relation("ProcessedOrders", fields: [processedByUserId], references: [id])

  // Multi-payment support
  orderPayments OrderPayment[] // Multiple payment methods can be used for one order

  // Legacy fields (kept for backward compatibility)
  paymentMethodType PaymentMethodType? @default(CASH) // Made optional since we now use OrderPayment
  cashAmountGiven   Float? // Amount of cash given by customer
  cashAmountChange  Float? // Change returned to customer
  checkPayments     CheckPayment[] // Relation to check payments
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  RETURNED
}

enum OrderSource {
  ONLINE // Order placed through website/e-commerce
  IN_STORE // Order placed in physical store/local POS
  PHONE // Order placed via phone call
}

// Multi-Payment Support for Orders
model OrderPayment {
  id            String            @id @default(uuid())
  orderId       String
  order         Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethodType
  amount        Float // Amount paid with this payment method
  status        PaymentStatus     @default(PENDING)
  transactionId String? // External transaction reference
  notes         String? // Payment-specific notes
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Cash payment specific fields
  cashGiven     Float? // For cash payments: amount given by customer
  cashChange    Float? // For cash payments: change returned

  // Check payment specific fields (alternative to CheckPayment model)
  checkNumber   String? // Check number
  checkBankName String? // Bank name on check
  checkDate     DateTime? // Date on check
  checkStatus   CheckStatus? // Status of check processing
}

// Check Payment Tracking
model CheckPayment {
  id            String      @id @default(uuid())
  orderId       String
  order         Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  checkNumber   String // Check number written on the check
  bankName      String? // Bank name if available
  amount        Float // Amount on the check
  checkDate     DateTime // Date written on the check
  receivedDate  DateTime    @default(now()) // When we received the check
  depositDate   DateTime? // When the check was deposited
  clearanceDate DateTime? // When the check cleared
  status        CheckStatus @default(RECEIVED)
  notes         String? // Any additional notes about the check
  shopId        String
  shop          Shop        @relation(fields: [shopId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum CheckStatus {
  RECEIVED // Check received but not deposited
  DEPOSITED // Check deposited at bank
  CLEARED // Check cleared successfully
  BOUNCED // Check bounced/returned
  CANCELLED // Check cancelled
}

model OrderItem {
  id        String          @id @default(uuid())
  quantity  Int
  unitPrice Float
  total     Float
  orderId   String
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String? // Make nullable since we'll store the info separately
  product   Product?        @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  // New fields to capture product information at order time
  productName        String // Store product name at time of order
  productSku         String? // Store SKU at time of order
  productBarcode     String? // Store barcode at time of order
  productDescription String? // Store description at time of order
  productOptions     Json? // Store variant options at time of order
  productImage       String? // Store primary product image at time of order

  // Tax and discount information at order time
  productTva         Float // Store TVA percentage at time of order
  discountPercentage Float? // Store discount percentage if applied
  discountAmount     Float? // Store discount amount if applied
  discountCode       String? // Store discount code if applied
  originalPrice      Float? // Store original price before discount
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String          @id @default(uuid())
  quantity  Int
  cartId    String
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

// Customer Data
model Address {
  id         String   @id @default(uuid())
  name       String?
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean  @default(false)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  orders     Order[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  title     String?
  comment   String?
  approved  Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Advanced & Premium Features
model PaymentMethod {
  id        String   @id @default(uuid())
  name      String
  provider  String
  isActive  Boolean  @default(true)
  config    Json
  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingMethod {
  id            String   @id @default(uuid())
  name          String
  description   String?
  price         Float
  estimatedDays String?
  isActive      Boolean  @default(true)
  shopId        String
  shop          Shop     @relation(fields: [shopId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Invoice {
  id            String   @id @default(uuid())
  invoiceNumber String   @unique
  orderId       String   @unique
  order         Order    @relation(fields: [orderId], references: [id])
  pdfUrl        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  shopId    String?
  shop      Shop?    @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
}

// System Configuration Limits
model SystemLimit {
  id          String   @id @default(uuid())
  codeName    String   @unique // e.g., "STANDARD_DISCOUNTS_LIMIT", "PREMIUM_DISCOUNT_CODES_LIMIT"
  name        String   // Human readable name
  description String?  // Description of what this limit controls
  value       Int      // The limit value (-1 for unlimited)
  category    String   // e.g., "DISCOUNTS", "PRODUCTS", "ORDERS"
  planType    PlanType? // Which plan this applies to (null means global)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
